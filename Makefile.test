ifndef CXX
    CXX = g++
endif
export CXX

ifndef CPPFLAGS
    CPPFLAGS = 
endif
export CPPFLAGS

#
# Unit tests
# ----------

.PHONY: unit-tests

# unit test of the ocaml-protoc internals  
unit-tests: 		
	$(OCB) $(UNIT_TESTS_DIR)/parse_field_options.native 
	$(OCB) $(UNIT_TESTS_DIR)/parse_file_options.native 
	$(OCB) $(UNIT_TESTS_DIR)/parse_fields.native 
	$(OCB) $(UNIT_TESTS_DIR)/parse_enum.native
	$(OCB) $(UNIT_TESTS_DIR)/parse_message.native 
	$(OCB) $(UNIT_TESTS_DIR)/parse_import.native 
	$(OCB) $(UNIT_TESTS_DIR)/pbtt_compile_p1.native 
	$(OCB) $(UNIT_TESTS_DIR)/pbtt_compile_p2.native 
	$(OCB) $(UNIT_TESTS_DIR)/backend_ocaml_test.native
	$(OCB) $(UNIT_TESTS_DIR)/ocaml_codegen_test.native
	$(OCB) $(UNIT_TESTS_DIR)/graph_test.native
	$(OCB) $(UNIT_TESTS_DIR)/pbrt_array.native
	./parse_field_options.native
	./parse_file_options.native
	./parse_fields.native
	./parse_enum.native
	./parse_message.native
	./parse_import.native
	./pbtt_compile_p1.native
	./pbtt_compile_p2.native
	./backend_ocaml_test.native
	./ocaml_codegen_test.native
	./graph_test.native
	./pbrt_array.native

#
# Integration tests
# -----------------
			
# Integration tests with Google protoc (C++ target) to ensure that 
# the generated OCaml code can encode/decode message compatible with Google 
# implementation

# location of where the Google protoc compiler is installed  
PB_INSTALL = ../../install/build
PB_HINC    = $(PB_INSTALL)/include/
PB_LINC    = $(PB_INSTALL)/lib/
PROTOC     = $(PB_INSTALL)/bin/protoc 

export LD_LIBRARY_PATH=$(PB_LINC)

ML_PROTOC=./ocaml-protoc -I $(OCAMLOPTIONS_HINC) -I $(PB_HINC)


%_cpp.tsk: %_cpp.cpp %.pb.cc $(OCAMLOPTIONS_HINC)/ocamloptions.pb.cc
	$(CXX) $(CPPFLAGS) -I ./ -I $(INTEGRATION_TESTS_DIR) -I $(OCAMLOPTIONS_HINC) -I $(PB_HINC) $? -L $(PB_LINC) -l protobuf -o $@

$(INTEGRATION_TESTS_DIR)/test10_cpp.tsk: \
	$(INTEGRATION_TESTS_DIR)/test10_cpp.cpp \
	$(INTEGRATION_TESTS_DIR)/test10.pb.cc \
	$(INTEGRATION_TESTS_DIR)/test09.pb.cc 
	$(CXX) $(CPPFLAGS) -I ./ -I $(INTEGRATION_TESTS_DIR)  -I $(PB_HINC) $? -L $(PB_LINC) -l protobuf -o $@ 

.SECONDARY: 

%.pb.cc: %.proto
	$(PROTOC) --cpp_out $(INTEGRATION_TESTS_DIR) -I $(PB_HINC) -I $(OCAMLOPTIONS_HINC) -I $(INTEGRATION_TESTS_DIR) $<

%_pb.ml %_pb.mli : %.proto bin.byte bin.native
	export OCAMLRUNPARAM="b" && $(ML_PROTOC) -I $(INTEGRATION_TESTS_DIR) -ml_out $(INTEGRATION_TESTS_DIR) $<
 
%_ml.native: %_pb.mli %_pb.ml %_ml.ml 
	$(OCB) -tag debug -I $(INTEGRATION_TESTS_DIR) -pkg unix $@ 

test%: bin.native bin.byte \
	   $(INTEGRATION_TESTS_DIR)/test%_ml.native \
	   $(INTEGRATION_TESTS_DIR)/test%_cpp.tsk 
	$(INTEGRATION_TESTS_DIR)/test$*_cpp.tsk encode
	time ./_build/$(INTEGRATION_TESTS_DIR)/test$*_ml.native decode
	./_build/$(INTEGRATION_TESTS_DIR)/test$*_ml.native encode
	time $(INTEGRATION_TESTS_DIR)/test$*_cpp.tsk decode

.PHONY: testCompat 

testCompat: $(INTEGRATION_TESTS_DIR)/test03_cpp.tsk $(INTEGRATION_TESTS_DIR)/test04_ml.native 
	$(INTEGRATION_TESTS_DIR)/test03_cpp.tsk encode
	./_build/$(INTEGRATION_TESTS_DIR)/test04_ml.native decode
	./_build/$(INTEGRATION_TESTS_DIR)/test04_ml.native encode
	$(INTEGRATION_TESTS_DIR)/test03_cpp.tsk decode

.PHONY: integration

integration: test01 test02 test05 test06 test07 test08 test09 test10 \
	         test11 test12 test13 test14 test15 test17 test17 testCompat 

#
# Google Unittest 
# ---------------

# In this test we make sure we can successfully generate and compile
# the code for the Google unittest.proto file. Because of some 
# known limitation of `ocaml-protoc` some cases were commented 
# out. 

.PHONY: google_unittest

google_unittest: bin.byte
	$(ML_PROTOC) -I $(GOOGLE_UNITTEST_DIR) -ml_out $(GOOGLE_UNITTEST_DIR) $(GOOGLE_UNITTEST_DIR)/unittest_import.proto 
	$(ML_PROTOC) -I $(GOOGLE_UNITTEST_DIR) -ml_out $(GOOGLE_UNITTEST_DIR) $(GOOGLE_UNITTEST_DIR)/unittest.proto 
	$(OCB) -I $(GOOGLE_UNITTEST_DIR) google_unittest.native
	./google_unittest.native

.PHONY: all-tests

all-tests: unit-tests integration google_unittest testCompat 

#
# Examples
# --------

# In this section we compile the example given in 
# the '.md' Documentation

.PHONY: all-examples

example%.native: src/examples/example%.ml src/examples/example%.proto bin.byte bin.native 
	$(ML_PROTOC) -ml_out src/examples/ ./src/examples/example$*.proto 
	$(OCB) -I src/examples src/examples/example$*.native

all-examples: example01.native example02.native example03.native example04.native example05.native

it: bin.native
	$(OCB) ./src/unit-tests/pbrt_array.native
	time ./pbrt_array.native

.PHONY: benchmark_single_ml.native

#
# Benchmarks
# ----------

# In this section we build benchmark tasks 

benchmark_single_ml.native: bin.byte
	$(ML_PROTOC) -I $(BENCHMARK_DIR) -ml_out $(BENCHMARK_DIR) $(BENCHMARK_DIR)/benchmark.proto
	$(OCB) -use-ocamlfind -pkg unix -I src/tests/benchmark $@ 
